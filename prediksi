import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
import numpy as np

# Asumsi data latihan sudah dimuat ke dalam DataFrame 'df_train' dan memiliki kolom 'classe'
# Asumsi data uji (20 kasus) sudah dimuat ke dalam DataFrame 'df_test'

# 1. Pemrosesan Awal Data
df_train_cleaned = df_train.copy()
df_test_cleaned = df_test.copy()

# Identifikasi dan hapus kolom dengan banyak nilai hilang (contoh: > 50%)
missing_threshold = 0.5
cols_to_drop = [col for col in df_train_cleaned.columns if df_train_cleaned[col].isnull().sum() / len(df_train_cleaned) > missing_threshold]
df_train_cleaned = df_train_cleaned.drop(columns=cols_to_drop)
df_test_cleaned = df_test_cleaned.drop(columns=cols_to_drop, errors='ignore') # errors='ignore' jika kolom tidak ada di test

# Hapus kolom yang tidak relevan
cols_to_drop_irrelevant = ["", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "problem_id", "new_window", "num_window"]
df_train_cleaned = df_train_cleaned.drop(columns=cols_to_drop_irrelevant, errors='ignore')
df_test_cleaned = df_test_cleaned.drop(columns=cols_to_drop_irrelevant, errors='ignore')

# Hapus baris dengan nilai hilang yang tersisa (strategi sederhana awal)
df_train_cleaned = df_train_cleaned.dropna()
df_test_cleaned = df_test_cleaned.fillna(df_train_cleaned.mean()) # Imputasi dengan mean dari data latih untuk data uji

# Pisahkan fitur (X) dan target (y)
X_train = df_train_cleaned.drop(columns=['classe'])
y_train = df_train_cleaned['classe']
X_test_predict = df_test_cleaned.drop(columns=['classe'], errors='ignore') # 'classe' mungkin tidak ada di data uji

# Penskalaan fitur (opsional, tapi baik untuk dicoba)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled_predict = scaler.transform(X_test_predict)

# 2. Pemilihan Model
model = RandomForestClassifier(random_state=42) # random_state untuk reproducibility

# 3. Validasi Silang
kf = KFold(n_splits=5, shuffle=True, random_state=42)
cv_scores = cross_val_score(model, X_train_scaled, y_train, cv=kf, scoring='accuracy')
print(f"Akurasi Validasi Silang (5-fold): {cv_scores}")
print(f"Akurasi Rata-rata Validasi Silang: {np.mean(cv_scores)}")

# 4. Pelatihan Model Akhir
model.fit(X_train_scaled, y_train)

# 5. Prediksi 20 Kasus Uji
predictions = model.predict(X_test_scaled_predict)
print("\nHasil Prediksi untuk 20 Kasus Uji:")
print(predictions)

# Laporan lebih lanjut (setelah eksperimen lebih lanjut):
# - Pentingnya fitur dari model
# - Matriks konfusi dari validasi silang
# - Diskusi tentang hyperparameter tuning (jika dilakukan)
